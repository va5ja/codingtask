# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.version: '%env(APP_VERSION)%'
    app.cors_origin: '/^.*$/i'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $cacheDir: '%kernel.cache_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    _instanceof:
        App\Request\Action\RequestActionInterface:
            tags: [ 'app.request_action_strategy' ]
            lazy: true
        App\EntityManager\EntityManagerInterface:
            tags: [ 'app.entity_manager' ]
            lazy: true
        App\Repository\RepositoryInterface:
            tags: [ 'app.entity_repository' ]
            lazy: true
            autowire: false
        App\DataProvider\DataProviderInterface:
            tags: [ 'app.data_provider_strategy' ]
            lazy: true
        App\DataPersister\DataPersisterInterface:
            tags: [ 'app.data_persister_strategy' ]
            lazy: true
        App\EntityManager\Metadata\Extractor\ExtractorInterface:
            tags: [ 'app.metadata_extractor_strategy' ]
            lazy: true

    App\Request\Action\RequestActionProcessor:
        arguments:
            $requestActions: !tagged_iterator { tag: 'app.request_action_strategy' }

    App\EntityManager\EntityManagerProvider:
        arguments:
            $entityManagers: !tagged_iterator { tag: 'app.entity_manager' }

    App\DataProvider\DataProvider:
        arguments:
            $providers: !tagged_iterator { tag: 'app.data_provider_strategy', default_priority_method: 'getDefaultPriority' }

    App\DataPersister\DataPersister:
        arguments:
            $persisters: !tagged_iterator { tag: 'app.data_persister_strategy', default_priority_method: 'getDefaultPriority' }

    App\EntityManager\Metadata\Extractor\MetadataExtractor:
        arguments:
            $extractors: !tagged_iterator { tag: 'app.metadata_extractor_strategy' }

    Laudis\Neo4j\Client:
        class: Laudis\Neo4j\ClientBuilder
        calls:
            - addHttpConnection: ['backup', '%env(NEO4J_HTTP_DSN)%']
            - addBoltConnection: ['default', '%env(NEO4J_BOLT_DSN)%']
            - setDefaultConnection: ['default']
            - build: !returns_clone []
